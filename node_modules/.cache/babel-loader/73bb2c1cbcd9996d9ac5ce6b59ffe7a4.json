{"ast":null,"code":"var _jsxFileName = \"/home/hector/Desktop/ProjectFrontend_Gorriz-Hector/src/IndexPage.js\";\nimport React from \"react\";\nimport './App.css';\nimport PageElement from './components/PageElement';\nimport Movie from './components/Movie';\nimport FormInfoElement from './components/FormInfoElement';\nimport FormInputElement from './components/FormInputElement';\nimport ResultsCount from './components/ResultsCount';\nimport TVShow from './components/TVShow';\nimport uncheckAll from './components/uncheckAll';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar apiKey = \"77543978b128067bc5c534314ead1ae4\";\nvar genresArray = []; //array global donde guardamos los filtros de generos\n\nfunction checkGenresArrays(arrayGenres, arrayAPI) {\n  let flag = [];\n\n  for (var i = 0; i < arrayGenres.length; i++) {\n    if (arrayAPI.includes(parseInt(arrayGenres[i]))) {\n      flag.push(true);\n    }\n  }\n\n  if (flag.length == arrayGenres.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction removeDuplicates(array) {\n  let newArray = array.filter((item, index) => array.indexOf(item) === index);\n  return newArray;\n}\n\nexport default class IndexPage extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      moviesContent: [],\n      //state para guardar todas las pelis\n      tvShowsContent: [],\n      //state para guardar todas las series\n      count: null,\n      //state para guardar el numero de resultados de cada peticion (pelis o series)\n      pages: null,\n      //state para guardar el numero total de paginas de cada peticion\n      actualPage: null,\n      //state para guardar el numero de pagina en la que se encuentra el usuario en cada momento\n      changePage: false,\n      //state flag para marcar cuando queremos cambiar de pagina\n      moviesGenresInfo: [],\n      //state para guardar la informacion de la peticion de generos de pelis\n      tvShowsGenresInfo: [],\n      //state para guardar la informacion de la peticion de generos de series\n      moviesORtvshowsSearch: \"movies\",\n      //iremos cambiando entre movies y tvshows para saber que info mostrar\n      filterSearch: false,\n      //state flag para marcar el momento en el que se producen cambios\n      genresSearchList: [],\n      //array dinamica para ir añadiendo o quitando generos (filtros). Sirve para pelis y series. Se apoya en la array global\n      searchWithoutFiltering: false,\n      //state flag para saber cuando hacemos una busqueda sin ningun filtro (cuando la array anterior esta vacia)\n      actualSearch: \"noFiltering\",\n      //state que nos dice si la busqueda actual es una busqueda con o sin filtros\n      searchType: \"noText\",\n      //state para guardar el tipo de busqueda. 2 tipos, con texto y sin texto.\n      filter: \"\",\n      //state para guardar el valor del search\n      searchWord: false //state flag para saber si hacemos una busqueda con palabra\n\n    };\n    this.pageBack = this.pageBack.bind(this);\n    this.pageForward = this.pageForward.bind(this);\n    this.filterChange = this.filterChange.bind(this);\n    this.formChange = this.formChange.bind(this);\n  } //----------------------------------------------------------------------------------------------------------------------//\n\n\n  componentDidMount() {\n    //fase de carga de la pagina. Todo lo siguiente esta pensado para esa situacion\n    //REQUEST FOR GETTING THE MOVIES GENRES DATA\n    fetch(\"https://api.themoviedb.org/3/genre/movie/list?api_key=\" + apiKey + \"&language=en-US\").then(response => response.json()).then(json => {\n      this.setState({\n        moviesGenresInfo: json.genres\n      });\n    }); //-------------//\n    //REQUEST FOR GETTING THE TV SHOWS GENRES DATA\n\n    fetch(\"https://api.themoviedb.org/3/genre/tv/list?api_key=\" + apiKey + \"&language=en-US\").then(response => response.json()).then(json => {\n      this.setState({\n        tvShowsGenresInfo: json.genres\n      });\n    }); //-------------//\n    //REQUEST FOR GETTING THE FIRST PAGE CONTENT (MOVIES)\n\n    fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=1\").then(response => response.json()).then(json => {\n      this.setState({\n        moviesContent: json.results,\n        count: json.total_results,\n        pages: json.total_pages,\n        actualPage: json.page //loading: false\n\n      });\n    });\n  } //----------------------------------------------------------------------------------------------------------------------//\n\n\n  componentDidUpdate() {\n    //fase de modificacion de filtros, formulario, cambio de pagina... cualquier cambio en el formulario vendremos aquí\n    //REQUEST FOR MOVIE GENRE FILTERING\n    if (this.state.filterSearch && this.state.moviesORtvshowsSearch == \"movies\" && this.state.actualSearch == \"filtering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST FOR MOVIE GENRE FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=1&with_genres=\" + this.state.genresSearchList).then(response => response.json()).then(json => {\n        this.setState({\n          moviesContent: json.results,\n          count: json.total_results,\n          pages: json.total_pages,\n          actualPage: json.page,\n          filterSearch: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST FOR TVSHOW GENRE FILTERING\n\n\n    if (this.state.filterSearch && this.state.moviesORtvshowsSearch == \"TVshow\" && this.state.actualSearch == \"filtering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST FOR TVSHOW GENRE FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=\" + this.state.genresSearchList + \"&include_null_first_air_dates=false\").then(response => response.json()).then(json => {\n        this.setState({\n          tvShowsContent: json.results,\n          count: json.total_results,\n          pages: json.total_pages,\n          actualPage: json.page,\n          filterSearch: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST MOVIES WITHOUT FILTERING\n\n\n    if (this.state.searchWithoutFiltering && this.state.moviesORtvshowsSearch == \"movies\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST MOVIES WITHOUT FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=1\").then(response => response.json()).then(json => {\n        this.setState({\n          moviesContent: json.results,\n          count: json.total_results,\n          pages: json.total_pages,\n          actualPage: json.page,\n          searchWithoutFiltering: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST TVSHOWS WITHOUT FILTERING\n\n\n    if (this.state.searchWithoutFiltering && this.state.moviesORtvshowsSearch == \"TVshow\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST TVSHOWS WITHOUT FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&include_null_first_air_dates=false\").then(response => response.json()).then(json => {\n        this.setState({\n          tvShowsContent: json.results,\n          count: json.total_results,\n          pages: json.total_pages,\n          actualPage: json.page,\n          searchWithoutFiltering: false //loading: false\n\n        });\n      });\n    } //--------------------------------------------//\n    //REQUEST FOR CHANGE PAGE FOR MOVIES WITHOUT FILTERING\n\n\n    if (this.state.changePage && this.state.moviesORtvshowsSearch == \"movies\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST FOR CHANGE PAGE FOR MOVIES WITHOUT FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=\" + this.state.actualPage).then(response => response.json()).then(json => {\n        this.setState({\n          moviesContent: json.results,\n\n          /*count: json.total_results,\r\n          pages: json.total_pages,\r\n          actualPage: json.page,\r\n          */\n          changePage: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST FOR CHANGE PAGE FOR TVSHOWS WITHOUT FILTERING\n\n\n    if (this.state.changePage && this.state.moviesORtvshowsSearch == \"TVshow\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST FOR CHANGE PAGE FOR TVSHOWS WITHOUT FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=\" + this.state.actualPage + \"&timezone=America%2FNew_York&include_null_first_air_dates=false\").then(response => response.json()).then(json => {\n        this.setState({\n          tvShowsContent: json.results,\n\n          /*count: json.total_results,\r\n          pages: json.total_pages,\r\n          actualPage: json.page,\r\n          */\n          changePage: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST FOR CHANGE PAGE FOR MOVIES WITH FILTERING\n\n\n    if (this.state.changePage && this.state.moviesORtvshowsSearch == \"movies\" && this.state.actualSearch == \"filtering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST FOR CHANGE PAGE FOR MOVIES WITH FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=\" + this.state.actualPage + \"&with_genres=\" + this.state.genresSearchList).then(response => response.json()).then(json => {\n        this.setState({\n          moviesContent: json.results,\n\n          /*count: json.total_results,\r\n          pages: json.total_pages,\r\n          actualPage: json.page,\r\n          */\n          changePage: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH FILTERING\n\n\n    if (this.state.changePage && this.state.moviesORtvshowsSearch == \"TVshow\" && this.state.actualSearch == \"filtering\" && this.state.searchType == \"noText\") {\n      console.log(\"REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\" + apiKey + \"&language=en-US&sort_by=popularity.desc&page=\" + this.state.actualPage + \"&timezone=America%2FNew_York&with_genres=\" + this.state.genresSearchList + \"&include_null_first_air_dates=false\").then(response => response.json()).then(json => {\n        this.setState({\n          tvShowsContent: json.results,\n\n          /*count: json.total_results,\r\n          pages: json.total_pages,\r\n          actualPage: json.page,\r\n          */\n          changePage: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST FOR CHANGE PAGE FOR MOVIES WITH SEARCH WITHOUT FILTERING\n\n\n    if (this.state.changePage && this.state.moviesORtvshowsSearch == \"movies\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"withText\") {\n      console.log(\"REQUEST FOR CHANGE PAGE FOR MOVIES WITH SEARCH WITHOUT FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\" + apiKey + \"&language=en-US&query=\" + this.state.filter + \"&page=\" + this.state.actualPage + \"&include_adult=false\").then(response => response.json()).then(json => {\n        this.setState({\n          moviesContent: json.results,\n\n          /*count: json.total_results,\r\n          pages: json.total_pages,\r\n          actualPage: json.page,\r\n          */\n          changePage: false //loading: false\n\n        });\n      });\n    } //-------------//\n    //REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH SEARCH WITHOUT FILTERING\n\n\n    if (this.state.changePage && this.state.moviesORtvshowsSearch == \"TVshow\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"withText\") {\n      console.log(\"REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH SEARCH WITHOUT FILTERING\");\n      fetch(\"https://api.themoviedb.org/3/search/tv?api_key=\" + apiKey + \"&language=en-US&page=\" + this.state.actualPage + \"&query=\" + this.state.filter + \"&include_adult=false\").then(response => response.json()).then(json => {\n        this.setState({\n          tvShowsContent: json.results,\n\n          /*count: json.total_results,\r\n          pages: json.total_pages,\r\n          actualPage: json.page,\r\n          */\n          changePage: false //loading: false\n\n        });\n      });\n    } //--------------------------------------------//\n    //REQUEST FOR SEARCH FOR MOVIES WITHOUT GENRES\n\n\n    if (this.state.searchWord && this.state.moviesORtvshowsSearch == \"movies\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"withText\") {\n      console.log(\"REQUEST FOR SEARCH FOR MOVIES WITHOUT GENRES\");\n      fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\" + apiKey + \"&language=en-US&query=\" + this.state.filter + \"&page=1&include_adult=false\").then(response => response.json()).then(json => {\n        this.setState({\n          moviesContent: json.results,\n          count: json.total_results,\n          pages: json.total_pages,\n          actualPage: json.page,\n          searchWord: false\n        });\n      });\n    } //---------------//\n    //REQUEST FOR SEARCH FOR TVSHOWS WITHOUT GENRES\n\n\n    if (this.state.searchWord && this.state.moviesORtvshowsSearch == \"TVshow\" && this.state.actualSearch == \"noFiltering\" && this.state.searchType == \"withText\") {\n      console.log(\"REQUEST FOR SEARCH FOR TVSHOWS WITHOUT GENRES\");\n      fetch(\"https://api.themoviedb.org/3/search/tv?api_key=\" + apiKey + \"&language=en-US&page=1&query=\" + this.state.filter + \"&include_adult=false\").then(response => response.json()).then(json => {\n        this.setState({\n          tvShowsContent: json.results,\n          count: json.total_results,\n          pages: json.total_pages,\n          actualPage: json.page,\n          searchWord: false\n        });\n      });\n    } //---------------//\n    //REQUEST FOR SEARCH FOR MOVIES WITH GENRES (PROBLEMA: SOLO PARA LA PAGINA 1)\n\n    /*if(this.state.searchWord && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"filtering\"){\r\n       fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\"+apiKey+\"&language=en-US&query=\"+this.state.filter+\"&page=1&include_adult=false\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            let moviesFromAPI = json.results;\r\n            let genres = genresArray;\r\n            let moviesWithGenres = [];\r\n        \r\n            moviesFromAPI.map((movie,idx) => checkGenresArrays(genres,movie.genre_ids) ? moviesWithGenres.push(movie) : console.log(\"movie not included in the search\"));\r\n            console.log(moviesWithGenres.length);\r\n            this.setState({\r\n                moviesContent: moviesWithGenres,\r\n                count: moviesWithGenres.length,\r\n                pages: 1,\r\n                actualPage: 1,\r\n                searchWord: false\r\n            });\r\n        });     \r\n    }*/\n    //REQUEST FOR SEARCH FOR MOVIES WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\n\n\n    if (this.state.searchWord && this.state.moviesORtvshowsSearch == \"movies\" && this.state.actualSearch == \"filtering\" && this.state.searchType == \"withText\") {\n      console.log(\"REQUEST FOR SEARCH FOR MOVIES WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\");\n      let moviesFromAPI = []; //aqui guardaremos todas las pelis que vienen de la API\n\n      let genres = genresArray; //guardamos los generos que tenemos activos\n\n      let moviesWithGenres = []; //aqui guardaremos todas las pelis que filtraremos\n\n      let pages = 30; //el numero de paginas que queremos consultar\n\n      for (let i = 1; i < pages; i++) {\n        fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\" + apiKey + \"&language=en-US&query=\" + this.state.filter + \"&page=\" + i + \"&include_adult=false\").then(response => response.json()).then(json => {\n          //moviesFromAPI.push(json.results);  METODO MAS DIFICIL. TENDRIAMOS UN ARRAY DE 2 DIMENSIONES\n          json.results.map((movie, idx) => moviesFromAPI.push(movie)); //generamos un array de objetos JSON\n\n          moviesFromAPI.map((movie, idx) => checkGenresArrays(genres, movie.genre_ids) ? moviesWithGenres.push(movie) : console.log(\"movie not included in the search\")); //filtramos utilizando una funcion\n\n          /*console.log(moviesWithGenres);\r\n          console.log(removeDuplicates(moviesWithGenres));\r\n          console.log(\"moviesFromAPI:\");\r\n          console.log(moviesFromAPI);\r\n          console.log(\"moviesWithGenres:\");\r\n          console.log(moviesWithGenres);*/\n\n          this.setState({\n            moviesContent: removeDuplicates(moviesWithGenres),\n            count: removeDuplicates(moviesWithGenres).length,\n            pages: 1,\n            actualPage: 1,\n            searchWord: false\n          });\n        });\n      }\n    } //---------------//\n    //REQUEST FOR SEARCH FOR TVSHOWS WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\n\n\n    if (this.state.searchWord && this.state.moviesORtvshowsSearch == \"TVshow\" && this.state.actualSearch == \"filtering\" && this.state.searchType == \"withText\") {\n      console.log(\"REQUEST FOR SEARCH FOR TVSHOWS WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\");\n      let tvFromAPI = []; //aqui guardaremos todas las tvShows que vienen de la API\n\n      let genres = genresArray; //guardamos los generos que tenemos activos\n\n      let tvWithGenres = []; //aqui guardaremos todas las tvShows que filtraremos\n\n      let pages = 30; //el numero de paginas que queremos consultar\n\n      for (let i = 1; i < pages; i++) {\n        fetch(\"https://api.themoviedb.org/3/search/tv?api_key=\" + apiKey + \"&language=en-US&query=\" + this.state.filter + \"&page=\" + i + \"&include_adult=false\").then(response => response.json()).then(json => {\n          //tvFromAPI.push(json.results);  METODO MAS DIFICIL. TENDRIAMOS UN ARRAY DE 2 DIMENSIONES\n          json.results.map((tv, idx) => tvFromAPI.push(tv)); //generamos un array de objetos JSON\n\n          tvFromAPI.map((tv, idx) => checkGenresArrays(genres, tv.genre_ids) ? tvWithGenres.push(tv) : console.log(\"tv not included in the search\")); //filtramos utilizando una funcion\n\n          /*console.log(tvWithGenres);\r\n          console.log(removeDuplicates(tvWithGenres));\r\n          console.log(\"tvFromAPI:\");\r\n          console.log(tvFromAPI);\r\n          console.log(\"tvWithGenres:\");\r\n          console.log(tvWithGenres);*/\n\n          this.setState({\n            tvShowsContent: removeDuplicates(tvWithGenres),\n            count: removeDuplicates(tvWithGenres).length,\n            pages: 1,\n            actualPage: 1,\n            searchWord: false\n          });\n        });\n      }\n    }\n  } //----------------------------------------------------------------------------------------------------------------------//\n\n\n  formChange(event) {\n    let filter = event.target.value; //guardamos el valor del input, es decir, la ID del genero especifico que viene desde la otra peticion para que sea dinamico\n\n    let inputID = event.target.id;\n    let inputElement = document.getElementById(inputID); //guardamos el elemento para comprobar luego si esta checkeado o no\n\n    if (filter == \"movies\") {\n      //si el valor es Movies, se refiere al input type radio\n      genresArray.length = 0; //reseteamos la array global para no llevar filtros desde una busqueda anterior\n\n      this.setState({\n        moviesORtvshowsSearch: \"movies\",\n        genresSearchList: [],\n        searchWithoutFiltering: true,\n        actualSearch: \"noFiltering\",\n        searchType: \"noText\" //loading: true\n\n      });\n      uncheckAll(); //funcion para uncheckear todos los checkbox\n    } else if (filter == \"TVshow\") {\n      //si el valor es TVShow, se refiere al otro input type radio\n      genresArray.length = 0;\n      this.setState({\n        moviesORtvshowsSearch: \"TVshow\",\n        genresSearchList: [],\n        searchWithoutFiltering: true,\n        actualSearch: \"noFiltering\",\n        searchType: \"noText\" //loading: true\n\n      });\n      uncheckAll();\n    } else {\n      //si el valor no es ningunon de los otros 2, quiere decir que es un genero, el valor numerico de la ID del genero\n      if (inputElement.checked == true) {\n        //si hemos checkeado el checkbox, aplicamos la nueva peticion incluyendo ese genero\n        genresArray.push(filter);\n\n        if (this.state.searchType == \"noText\") {\n          //debemos comprobar si se ha añadido el genero cuando hay una busqueda tipo SEARCH o DISCOVER. Si es DISCOVER...\n          this.setState({\n            filterSearch: true,\n            genresSearchList: genresArray,\n            actualSearch: \"filtering\" //loading: true\n\n          });\n        } else if (this.state.searchType == \"withText\") {\n          //Si es SEARCH...\n          this.setState({\n            searchWord: true,\n            genresSearchList: genresArray,\n            actualSearch: \"filtering\" //loading: true\n\n          });\n        }\n      } else if (inputElement.checked == false) {\n        //si hemos desactivado el checkbox, eliminamos ese genero de la busqueda\n        let index = genresArray.indexOf(filter); //encontramos el item especifico de la array para borrarlo\n\n        genresArray.splice(index, 1); //lo borramos con el metodo splice()\n\n        if (genresArray && genresArray.length) {\n          //Si la array no esta vacia...\n          if (this.state.searchType == \"noText\") {\n            //Comprobamos si tenemos texto o no...\n            this.setState({\n              genresSearchList: genresArray,\n              filterSearch: true,\n              actualSearch: \"filtering\" //loading: true\n\n            });\n          } else if (this.state.searchType == \"withText\") {\n            //Si es SEARCH...\n            this.setState({\n              genresSearchList: genresArray,\n              searchWord: true,\n              actualSearch: \"filtering\" //loading: true\n\n            });\n          }\n        } else {\n          //si la array esta vacia... haremos una busqueda sin generos por defecto\n          if (this.state.searchType == \"noText\") {\n            //Comprobamos si tenemos texto o no...\n            this.setState({\n              genresSearchList: null,\n              searchWithoutFiltering: true,\n              actualSearch: \"noFiltering\" //loading: true\n\n            });\n          } else if (this.state.searchType == \"withText\") {\n            //Si es SEARCH...\n            this.setState({\n              genresSearchList: null,\n              searchWord: true,\n              actualSearch: \"noFiltering\" //loading: true\n\n            });\n          }\n        }\n      }\n    }\n  } //----------------------------------------------------------------------------------------------------------------------//\n\n\n  pageBack(event) {\n    let pageToGo = this.state.actualPage - 1;\n    this.setState({\n      changePage: true,\n      actualPage: pageToGo\n    });\n  }\n\n  pageForward(event) {\n    let pageToGo = this.state.actualPage + 1;\n    this.setState({\n      changePage: true,\n      actualPage: pageToGo\n    });\n  } //----------------------------------------------------------------------------------------------------------------------//\n\n\n  filterChange(event) {\n    let text = event.target.value;\n\n    if (text != \"\") {\n      //comprobamos que haya texto. Haremos una busqueda tipo SEARCH\n      this.setState({\n        filter: event.target.value,\n        searchWord: true,\n        searchType: \"withText\"\n      });\n    } else {\n      //si borramos el texto... habra que hacer una busqueda sin texto, tipo DISCOVER. Hay que comprobar si tenemos filtros marcados. Utilizamos el state \"actualSearch\" para hacer la comprobacion\n      if (this.state.actualSearch == \"filtering\") {\n        // en este caso hacemos una busqueda con generos\n        this.setState({\n          filterSearch: true //activamos la bandera encargada de hacer peticiones con filtros\n\n        });\n      } else {\n        // hacemos una busqueda sin generos\n        this.setState({\n          searchWithoutFiltering: true //activamos la bandera encargada de hacer peticiones sin filtros\n\n        });\n      } //independientemente del tipo de busqueda, hay que resetear los states:\n\n\n      this.setState({\n        filter: \"\",\n        searchType: \"noText\"\n      });\n    }\n  } //----------------------------------------------------------------------------------------------------------------------//\n\n\n  render() {\n    //GENERAMOS LA LISTA DE GENEROS\n    let genresForm = this.state.moviesORtvshowsSearch == \"movies\" ? this.state.moviesGenresInfo.map((genre, idx) =>\n    /*#__PURE__*/\n    //si el state nos marca que estamos mostrando pelis, generamos la lista de generos de pelis dinamicamente\n    _jsxDEV(FormInputElement, {\n      type: \"checkbox\",\n      id: [\"inputMovie\" + idx],\n      name: genre.name,\n      value: genre.id,\n      label: genre.name,\n      checkedBool: \"false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 576,\n      columnNumber: 17\n    }, this)) : this.state.tvShowsGenresInfo.map((genre, idx) => /*#__PURE__*/_jsxDEV(FormInputElement, {\n      type: \"checkbox\",\n      id: [\"inputTVshow\" + idx],\n      name: genre.name,\n      value: genre.id,\n      label: genre.name,\n      checkedBool: \"false\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 580,\n      columnNumber: 17\n    }, this)); //----------------------//\n    //GENERAMOS EL CONTENIDO DE PELIS O SERIES\n\n    let content = this.state.moviesORtvshowsSearch == \"movies\" ? //generamos todo el contenido de peliculas o series\n    this.state.moviesContent.map((movie, idx) => /*#__PURE__*/_jsxDEV(Link, {\n      to: '/movieDetails/' + movie.id,\n      children: /*#__PURE__*/_jsxDEV(Movie, {\n        data: movie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 591,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 590,\n      columnNumber: 17\n    }, this) ///\n    ) : this.state.tvShowsContent.map((show, idx) => /*#__PURE__*/_jsxDEV(Link, {\n      to: '/tvShowDetails/' + show.id,\n      children: /*#__PURE__*/_jsxDEV(TVShow, {\n        data: show\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 598,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 597,\n      columnNumber: 17\n    }, this) ///\n    ); //----------------------//\n\n    let message = this.state.searchType == \"withText\" ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"You have searched for \", /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"highlight\",\n        children: [\"\\\"\", this.state.filter, \"\\\"\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 608,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 608,\n      columnNumber: 9\n    }, this) : this.state.pages - this.state.actualPage == 0 ? /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"You have discovered all the \", /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"highlight\",\n        children: this.state.moviesORtvshowsSearch\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 611,\n        columnNumber: 41\n      }, this), \", you are a real cinema addict!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 611,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"There are still \", /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"highlight\",\n        children: this.state.pages - this.state.actualPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 29\n      }, this), \" more pages and \", /*#__PURE__*/_jsxDEV(\"label\", {\n        className: \"highlight\",\n        children: this.state.count - 20 * this.state.actualPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 124\n      }, this), \" \", this.state.moviesORtvshowsSearch, \" !\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 613,\n      columnNumber: 9\n    }, this);\n    let firstPageDisabled = this.state.actualPage == 1 ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"<\",\n      onClick: this.pageBack,\n      disabled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 60\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \"<\",\n      onClick: this.pageBack\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 615,\n      columnNumber: 129\n    }, this);\n    let lastPageDisabled = this.state.actualPage == this.state.pages ? /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \">\",\n      onClick: this.pageForward,\n      disabled: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 74\n    }, this) : /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"button\",\n      value: \">\",\n      onClick: this.pageForward\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 146\n    }, this); //----------------------//                                 \n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"formulario\",\n        children: [/*#__PURE__*/_jsxDEV(FormInfoElement, {\n          data: \"Search\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"inputSearch\",\n          onChange: this.filterChange,\n          placeholder: [\"Search \" + this.state.moviesORtvshowsSearch + \"!\"]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 624,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          id: \"formulario\",\n          onChange: this.formChange,\n          children: [/*#__PURE__*/_jsxDEV(FormInfoElement, {\n            data: \"Discover\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 626,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormInputElement, {\n            type: \"radio\",\n            id: \"discoverMovies\",\n            name: \"type\",\n            value: \"movies\",\n            label: \"Movies\",\n            checkedBool: \"true\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 627,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormInputElement, {\n            type: \"radio\",\n            id: \"discoverTVshows\",\n            name: \"type\",\n            value: \"TVshow\",\n            label: \"TV Shows\",\n            checkedBool: \"false\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 628,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(FormInfoElement, {\n            data: \"Genres\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 629,\n            columnNumber: 25\n          }, this), genresForm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 625,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 622,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"background\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"contenido\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(ResultsCount, {\n              count: this.state.count\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 636,\n              columnNumber: 25\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 635,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 638,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pagesContent\",\n            children: [message, /*#__PURE__*/_jsxDEV(\"form\", {\n              onClick: this.pageChange,\n              children: [firstPageDisabled, this.state.actualPage, lastPageDisabled]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 643,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 641,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 634,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 633,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 621,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"names":["React","PageElement","Movie","FormInfoElement","FormInputElement","ResultsCount","TVShow","uncheckAll","Link","apiKey","genresArray","checkGenresArrays","arrayGenres","arrayAPI","flag","i","length","includes","parseInt","push","removeDuplicates","array","newArray","filter","item","index","indexOf","IndexPage","Component","constructor","state","moviesContent","tvShowsContent","count","pages","actualPage","changePage","moviesGenresInfo","tvShowsGenresInfo","moviesORtvshowsSearch","filterSearch","genresSearchList","searchWithoutFiltering","actualSearch","searchType","searchWord","pageBack","bind","pageForward","filterChange","formChange","componentDidMount","fetch","then","response","json","setState","genres","results","total_results","total_pages","page","componentDidUpdate","console","log","moviesFromAPI","moviesWithGenres","map","movie","idx","genre_ids","tvFromAPI","tvWithGenres","tv","event","target","value","inputID","id","inputElement","document","getElementById","checked","splice","pageToGo","text","render","genresForm","genre","name","content","show","message","firstPageDisabled","lastPageDisabled","pageChange"],"sources":["/home/hector/Desktop/ProjectFrontend_Gorriz-Hector/src/IndexPage.js"],"sourcesContent":["import React from \"react\";\r\nimport './App.css';\r\nimport PageElement from './components/PageElement';\r\nimport Movie from './components/Movie';\r\nimport FormInfoElement from './components/FormInfoElement';\r\nimport FormInputElement from './components/FormInputElement';\r\nimport ResultsCount from './components/ResultsCount';\r\nimport TVShow from './components/TVShow';\r\nimport uncheckAll from './components/uncheckAll';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\n\r\nvar apiKey=\"77543978b128067bc5c534314ead1ae4\";\r\n\r\nvar genresArray=[];    //array global donde guardamos los filtros de generos\r\n\r\nfunction checkGenresArrays(arrayGenres,arrayAPI){\r\n    let flag = [];\r\n    for(var i=0; i < arrayGenres.length; i++){\r\n        if(arrayAPI.includes(parseInt(arrayGenres[i]))){\r\n           flag.push(true);\r\n        }\r\n    }\r\n    \r\n    if(flag.length==arrayGenres.length){\r\n       return true;\r\n    } else{\r\n        return false;   \r\n    }\r\n}\r\n\r\nfunction removeDuplicates(array){\r\n    let newArray = array.filter((item,index) => array.indexOf(item)===index);\r\n    return newArray;\r\n}\r\n\r\nexport default class IndexPage extends React.Component {\r\n        constructor() {\r\n        super();\r\n        this.state = {\r\n            moviesContent: [],   //state para guardar todas las pelis\r\n            tvShowsContent: [],  //state para guardar todas las series\r\n            count: null,    //state para guardar el numero de resultados de cada peticion (pelis o series)\r\n            pages: null,    //state para guardar el numero total de paginas de cada peticion\r\n            actualPage: null,    //state para guardar el numero de pagina en la que se encuentra el usuario en cada momento\r\n            changePage: false,   //state flag para marcar cuando queremos cambiar de pagina\r\n            moviesGenresInfo: [],   //state para guardar la informacion de la peticion de generos de pelis\r\n            tvShowsGenresInfo: [],   //state para guardar la informacion de la peticion de generos de series\r\n            moviesORtvshowsSearch: \"movies\",   //iremos cambiando entre movies y tvshows para saber que info mostrar\r\n            filterSearch: false,        //state flag para marcar el momento en el que se producen cambios\r\n            genresSearchList: [],      //array dinamica para ir añadiendo o quitando generos (filtros). Sirve para pelis y series. Se apoya en la array global\r\n            searchWithoutFiltering: false,    //state flag para saber cuando hacemos una busqueda sin ningun filtro (cuando la array anterior esta vacia)\r\n            actualSearch: \"noFiltering\",      //state que nos dice si la busqueda actual es una busqueda con o sin filtros\r\n            searchType: \"noText\" ,         //state para guardar el tipo de busqueda. 2 tipos, con texto y sin texto.\r\n            filter: \"\",       //state para guardar el valor del search\r\n            searchWord: false    //state flag para saber si hacemos una busqueda con palabra\r\n        }\r\n        \r\n        this.pageBack = this.pageBack.bind(this);\r\n        this.pageForward = this.pageForward.bind(this);\r\n        this.filterChange = this.filterChange.bind(this);\r\n        this.formChange = this.formChange.bind(this);\r\n    }\r\n    \r\n    //----------------------------------------------------------------------------------------------------------------------//\r\n    \r\n\r\n    \r\n    componentDidMount() {    //fase de carga de la pagina. Todo lo siguiente esta pensado para esa situacion\r\n        \r\n        //REQUEST FOR GETTING THE MOVIES GENRES DATA\r\n        fetch(\"https://api.themoviedb.org/3/genre/movie/list?api_key=\"+apiKey+\"&language=en-US\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            this.setState({\r\n                moviesGenresInfo: json.genres\r\n            });\r\n        });\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR GETTING THE TV SHOWS GENRES DATA\r\n        fetch(\"https://api.themoviedb.org/3/genre/tv/list?api_key=\"+apiKey+\"&language=en-US\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            this.setState({\r\n                tvShowsGenresInfo: json.genres\r\n            });\r\n        });\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR GETTING THE FIRST PAGE CONTENT (MOVIES)\r\n        fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=1\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            this.setState({\r\n                moviesContent: json.results,\r\n                count: json.total_results,\r\n                pages: json.total_pages,\r\n                actualPage: json.page,\r\n                //loading: false\r\n            });\r\n        });\r\n    }\r\n    \r\n    //----------------------------------------------------------------------------------------------------------------------//\r\n    \r\n    componentDidUpdate(){   //fase de modificacion de filtros, formulario, cambio de pagina... cualquier cambio en el formulario vendremos aquí\r\n        \r\n        //REQUEST FOR MOVIE GENRE FILTERING\r\n        if(this.state.filterSearch && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"filtering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST FOR MOVIE GENRE FILTERING\");\r\n            fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=1&with_genres=\" + this.state.genresSearchList)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    moviesContent: json.results,\r\n                    count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    filterSearch: false,\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR TVSHOW GENRE FILTERING\r\n        if(this.state.filterSearch && this.state.moviesORtvshowsSearch==\"TVshow\" && this.state.actualSearch==\"filtering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST FOR TVSHOW GENRE FILTERING\");\r\n            fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&with_genres=\"+this.state.genresSearchList+\"&include_null_first_air_dates=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    tvShowsContent: json.results,\r\n                    count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    filterSearch: false,\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST MOVIES WITHOUT FILTERING\r\n        if(this.state.searchWithoutFiltering && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST MOVIES WITHOUT FILTERING\");\r\n            fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=1\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    moviesContent: json.results,\r\n                    count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    searchWithoutFiltering: false,\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST TVSHOWS WITHOUT FILTERING\r\n        if(this.state.searchWithoutFiltering && this.state.moviesORtvshowsSearch==\"TVshow\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST TVSHOWS WITHOUT FILTERING\");\r\n            fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=1&timezone=America%2FNew_York&include_null_first_air_dates=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    tvShowsContent: json.results,\r\n                    count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    searchWithoutFiltering: false,\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //--------------------------------------------//\r\n        \r\n        //REQUEST FOR CHANGE PAGE FOR MOVIES WITHOUT FILTERING\r\n        if(this.state.changePage && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST FOR CHANGE PAGE FOR MOVIES WITHOUT FILTERING\");\r\n            fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=\"+this.state.actualPage)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    moviesContent: json.results,\r\n                    /*count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    */changePage: false\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR CHANGE PAGE FOR TVSHOWS WITHOUT FILTERING\r\n        if(this.state.changePage && this.state.moviesORtvshowsSearch==\"TVshow\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST FOR CHANGE PAGE FOR TVSHOWS WITHOUT FILTERING\");\r\n            fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=\"+this.state.actualPage+\"&timezone=America%2FNew_York&include_null_first_air_dates=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    tvShowsContent: json.results,\r\n                    /*count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    */changePage: false\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR CHANGE PAGE FOR MOVIES WITH FILTERING\r\n        if(this.state.changePage && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"filtering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST FOR CHANGE PAGE FOR MOVIES WITH FILTERING\");\r\n            fetch(\"https://api.themoviedb.org/3/discover/movie?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=\"+this.state.actualPage+\"&with_genres=\" + this.state.genresSearchList)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    moviesContent: json.results,\r\n                    /*count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    */changePage: false\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH FILTERING\r\n        if(this.state.changePage && this.state.moviesORtvshowsSearch==\"TVshow\" && this.state.actualSearch==\"filtering\" && this.state.searchType==\"noText\"){\r\n            console.log(\"REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH FILTERING\");\r\n           fetch(\"https://api.themoviedb.org/3/discover/tv?api_key=\"+apiKey+\"&language=en-US&sort_by=popularity.desc&page=\"+this.state.actualPage+\"&timezone=America%2FNew_York&with_genres=\"+this.state.genresSearchList+\"&include_null_first_air_dates=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    tvShowsContent: json.results,\r\n                    /*count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    */changePage: false\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR CHANGE PAGE FOR MOVIES WITH SEARCH WITHOUT FILTERING\r\n        if(this.state.changePage && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"withText\"){\r\n            console.log(\"REQUEST FOR CHANGE PAGE FOR MOVIES WITH SEARCH WITHOUT FILTERING\");\r\n           fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\"+apiKey+\"&language=en-US&query=\"+this.state.filter+\"&page=\"+this.state.actualPage+\"&include_adult=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    moviesContent: json.results,\r\n                    /*count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    */changePage: false\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //-------------//\r\n        \r\n        //REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH SEARCH WITHOUT FILTERING\r\n        if(this.state.changePage && this.state.moviesORtvshowsSearch==\"TVshow\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"withText\"){\r\n            console.log(\"REQUEST FOR CHANGE PAGE FOR TVSHOWS WITH SEARCH WITHOUT FILTERING\");\r\n           fetch(\"https://api.themoviedb.org/3/search/tv?api_key=\"+apiKey+\"&language=en-US&page=\"+this.state.actualPage+\"&query=\"+this.state.filter+\"&include_adult=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    tvShowsContent: json.results,\r\n                    /*count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    */changePage: false\r\n                    //loading: false\r\n                });\r\n            });\r\n        }\r\n        \r\n        //--------------------------------------------//\r\n        \r\n        //REQUEST FOR SEARCH FOR MOVIES WITHOUT GENRES\r\n        if(this.state.searchWord && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"withText\"){\r\n            console.log(\"REQUEST FOR SEARCH FOR MOVIES WITHOUT GENRES\");\r\n           fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\"+apiKey+\"&language=en-US&query=\"+this.state.filter+\"&page=1&include_adult=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    moviesContent: json.results,\r\n                    count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    searchWord: false\r\n                });\r\n            });            \r\n        }\r\n        \r\n        //---------------//\r\n        \r\n        //REQUEST FOR SEARCH FOR TVSHOWS WITHOUT GENRES\r\n        if(this.state.searchWord && this.state.moviesORtvshowsSearch==\"TVshow\" && this.state.actualSearch==\"noFiltering\" && this.state.searchType==\"withText\"){\r\n            console.log(\"REQUEST FOR SEARCH FOR TVSHOWS WITHOUT GENRES\");\r\n           fetch(\"https://api.themoviedb.org/3/search/tv?api_key=\"+apiKey+\"&language=en-US&page=1&query=\"+this.state.filter+\"&include_adult=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({\r\n                    tvShowsContent: json.results,\r\n                    count: json.total_results,\r\n                    pages: json.total_pages,\r\n                    actualPage: json.page,\r\n                    searchWord: false\r\n                });\r\n            });            \r\n        }\r\n    \r\n        //---------------//\r\n        \r\n        //REQUEST FOR SEARCH FOR MOVIES WITH GENRES (PROBLEMA: SOLO PARA LA PAGINA 1)\r\n        /*if(this.state.searchWord && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"filtering\"){\r\n           fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\"+apiKey+\"&language=en-US&query=\"+this.state.filter+\"&page=1&include_adult=false\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                let moviesFromAPI = json.results;\r\n                let genres = genresArray;\r\n                let moviesWithGenres = [];\r\n            \r\n                moviesFromAPI.map((movie,idx) => checkGenresArrays(genres,movie.genre_ids) ? moviesWithGenres.push(movie) : console.log(\"movie not included in the search\"));\r\n                console.log(moviesWithGenres.length);\r\n                this.setState({\r\n                    moviesContent: moviesWithGenres,\r\n                    count: moviesWithGenres.length,\r\n                    pages: 1,\r\n                    actualPage: 1,\r\n                    searchWord: false\r\n                });\r\n            });     \r\n        }*/\r\n        \r\n        //REQUEST FOR SEARCH FOR MOVIES WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\r\n        if(this.state.searchWord && this.state.moviesORtvshowsSearch==\"movies\" && this.state.actualSearch==\"filtering\" && this.state.searchType==\"withText\"){\r\n            console.log(\"REQUEST FOR SEARCH FOR MOVIES WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\");\r\n            let moviesFromAPI = [];    //aqui guardaremos todas las pelis que vienen de la API\r\n            let genres = genresArray;    //guardamos los generos que tenemos activos\r\n            let moviesWithGenres = [];    //aqui guardaremos todas las pelis que filtraremos\r\n            let pages = 30;               //el numero de paginas que queremos consultar\r\n            \r\n            for(let i=1; i<pages; i++){\r\n                fetch(\"https://api.themoviedb.org/3/search/movie?api_key=\"+apiKey+\"&language=en-US&query=\"+this.state.filter+\"&page=\"+i+\"&include_adult=false\")\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    //moviesFromAPI.push(json.results);  METODO MAS DIFICIL. TENDRIAMOS UN ARRAY DE 2 DIMENSIONES\r\n                    json.results.map((movie,idx) => moviesFromAPI.push(movie));   //generamos un array de objetos JSON\r\n                    moviesFromAPI.map((movie,idx) => checkGenresArrays(genres,movie.genre_ids) ? moviesWithGenres.push(movie) : console.log(\"movie not included in the search\"));   //filtramos utilizando una funcion\r\n                    /*console.log(moviesWithGenres);\r\n                    console.log(removeDuplicates(moviesWithGenres));\r\n                    console.log(\"moviesFromAPI:\");\r\n                    console.log(moviesFromAPI);\r\n                    console.log(\"moviesWithGenres:\");\r\n                    console.log(moviesWithGenres);*/\r\n                    this.setState({\r\n                        moviesContent: removeDuplicates(moviesWithGenres),\r\n                        count: removeDuplicates(moviesWithGenres).length,\r\n                        pages: 1,\r\n                        actualPage: 1,\r\n                        searchWord: false\r\n                    }); \r\n                });\r\n            }\r\n        }\r\n        \r\n        //---------------//\r\n        \r\n        //REQUEST FOR SEARCH FOR TVSHOWS WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\r\n        if(this.state.searchWord && this.state.moviesORtvshowsSearch==\"TVshow\" && this.state.actualSearch==\"filtering\" && this.state.searchType==\"withText\"){\r\n            console.log(\"REQUEST FOR SEARCH FOR TVSHOWS WITH GENRES (SOLUCION: PARA MAS DE 1 PAGINA)\");\r\n            let tvFromAPI = [];    //aqui guardaremos todas las tvShows que vienen de la API\r\n            let genres = genresArray;    //guardamos los generos que tenemos activos\r\n            let tvWithGenres = [];    //aqui guardaremos todas las tvShows que filtraremos\r\n            let pages = 30;               //el numero de paginas que queremos consultar\r\n            \r\n            for(let i=1; i<pages; i++){\r\n                fetch(\"https://api.themoviedb.org/3/search/tv?api_key=\"+apiKey+\"&language=en-US&query=\"+this.state.filter+\"&page=\"+i+\"&include_adult=false\")\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    //tvFromAPI.push(json.results);  METODO MAS DIFICIL. TENDRIAMOS UN ARRAY DE 2 DIMENSIONES\r\n                    json.results.map((tv,idx) => tvFromAPI.push(tv));   //generamos un array de objetos JSON\r\n                    tvFromAPI.map((tv,idx) => checkGenresArrays(genres,tv.genre_ids) ? tvWithGenres.push(tv) : console.log(\"tv not included in the search\"));   //filtramos utilizando una funcion\r\n                    /*console.log(tvWithGenres);\r\n                    console.log(removeDuplicates(tvWithGenres));\r\n                    console.log(\"tvFromAPI:\");\r\n                    console.log(tvFromAPI);\r\n                    console.log(\"tvWithGenres:\");\r\n                    console.log(tvWithGenres);*/\r\n                    this.setState({\r\n                        tvShowsContent: removeDuplicates(tvWithGenres),\r\n                        count: removeDuplicates(tvWithGenres).length,\r\n                        pages: 1,\r\n                        actualPage: 1,\r\n                        searchWord: false\r\n                    }); \r\n                });\r\n            }\r\n        }\r\n        \r\n    }\r\n    \r\n    //----------------------------------------------------------------------------------------------------------------------//\r\n    \r\n    \r\n    formChange(event){\r\n        let filter=event.target.value;    //guardamos el valor del input, es decir, la ID del genero especifico que viene desde la otra peticion para que sea dinamico\r\n        let inputID=event.target.id;\r\n        let inputElement=document.getElementById(inputID);   //guardamos el elemento para comprobar luego si esta checkeado o no\r\n        \r\n        if(filter==\"movies\"){         //si el valor es Movies, se refiere al input type radio\r\n            genresArray.length=0;     //reseteamos la array global para no llevar filtros desde una busqueda anterior\r\n            this.setState({\r\n                moviesORtvshowsSearch: \"movies\",\r\n                genresSearchList: [],\r\n                searchWithoutFiltering: true,\r\n                actualSearch: \"noFiltering\",\r\n                searchType: \"noText\"\r\n                //loading: true\r\n            });\r\n            uncheckAll();     //funcion para uncheckear todos los checkbox\r\n        } else if(filter==\"TVshow\"){    //si el valor es TVShow, se refiere al otro input type radio\r\n            genresArray.length=0\r\n            this.setState({\r\n                moviesORtvshowsSearch: \"TVshow\",\r\n                genresSearchList: [],\r\n                searchWithoutFiltering: true,\r\n                actualSearch: \"noFiltering\",\r\n                searchType: \"noText\"\r\n                //loading: true\r\n            });\r\n            uncheckAll();\r\n        } else {       //si el valor no es ningunon de los otros 2, quiere decir que es un genero, el valor numerico de la ID del genero\r\n            if(inputElement.checked == true){     //si hemos checkeado el checkbox, aplicamos la nueva peticion incluyendo ese genero\r\n                genresArray.push(filter);\r\n                if(this.state.searchType==\"noText\"){     //debemos comprobar si se ha añadido el genero cuando hay una busqueda tipo SEARCH o DISCOVER. Si es DISCOVER...\r\n                    this.setState({\r\n                        filterSearch: true,\r\n                        genresSearchList: genresArray,\r\n                        actualSearch: \"filtering\"\r\n                        //loading: true\r\n                    });\r\n                } else if(this.state.searchType==\"withText\"){    //Si es SEARCH...\r\n                    this.setState({\r\n                        searchWord: true,\r\n                        genresSearchList: genresArray,\r\n                        actualSearch: \"filtering\"\r\n                        //loading: true\r\n                    });   \r\n                }\r\n                \r\n            } else if(inputElement.checked == false){      //si hemos desactivado el checkbox, eliminamos ese genero de la busqueda\r\n                let index = genresArray.indexOf(filter);     //encontramos el item especifico de la array para borrarlo\r\n                genresArray.splice(index,1);                 //lo borramos con el metodo splice()\r\n                if(genresArray && genresArray.length){       //Si la array no esta vacia...\r\n                    if(this.state.searchType==\"noText\"){      //Comprobamos si tenemos texto o no...\r\n                        this.setState({\r\n                            genresSearchList: genresArray,\r\n                            filterSearch: true,\r\n                            actualSearch: \"filtering\"\r\n                            //loading: true\r\n                        });\r\n                    } else if(this.state.searchType==\"withText\"){      //Si es SEARCH...\r\n                        this.setState({\r\n                            genresSearchList: genresArray,\r\n                            searchWord: true,\r\n                            actualSearch: \"filtering\"\r\n                            //loading: true\r\n                        });  \r\n                    }\r\n                } else {                   //si la array esta vacia... haremos una busqueda sin generos por defecto\r\n                    if(this.state.searchType==\"noText\"){      //Comprobamos si tenemos texto o no...\r\n                        this.setState({\r\n                            genresSearchList: null,\r\n                            searchWithoutFiltering: true,\r\n                            actualSearch: \"noFiltering\"\r\n                            //loading: true\r\n                        });\r\n                    } else if(this.state.searchType==\"withText\"){      //Si es SEARCH...\r\n                        this.setState({\r\n                            genresSearchList: null,\r\n                            searchWord: true,\r\n                            actualSearch: \"noFiltering\"\r\n                            //loading: true\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    \r\n    //----------------------------------------------------------------------------------------------------------------------//\r\n    \r\n    \r\n    pageBack(event){\r\n        let pageToGo = this.state.actualPage - 1;\r\n        this.setState({\r\n            changePage: true,\r\n            actualPage: pageToGo\r\n        });\r\n    }\r\n    pageForward(event){\r\n        let pageToGo = this.state.actualPage + 1;\r\n        this.setState({\r\n            changePage: true,\r\n            actualPage: pageToGo\r\n        });\r\n    }\r\n    \r\n    \r\n    //----------------------------------------------------------------------------------------------------------------------//\r\n    \r\n    \r\n    filterChange(event) {\r\n        \r\n        let text = event.target.value;\r\n        \r\n        if(text != \"\"){    //comprobamos que haya texto. Haremos una busqueda tipo SEARCH\r\n           this.setState({\r\n               filter: event.target.value,\r\n               searchWord: true,\r\n               searchType: \"withText\"\r\n           });\r\n        } else{      //si borramos el texto... habra que hacer una busqueda sin texto, tipo DISCOVER. Hay que comprobar si tenemos filtros marcados. Utilizamos el state \"actualSearch\" para hacer la comprobacion\r\n            if(this.state.actualSearch==\"filtering\"){   // en este caso hacemos una busqueda con generos\r\n               this.setState({\r\n                    filterSearch: true     //activamos la bandera encargada de hacer peticiones con filtros\r\n                });\r\n            } else{   // hacemos una busqueda sin generos\r\n                this.setState({\r\n                    searchWithoutFiltering: true     //activamos la bandera encargada de hacer peticiones sin filtros\r\n                });\r\n            }\r\n            //independientemente del tipo de busqueda, hay que resetear los states:\r\n            this.setState({\r\n               filter: \"\",\r\n               searchType: \"noText\"\r\n           });\r\n        }\r\n        \r\n    }\r\n    \r\n    \r\n    //----------------------------------------------------------------------------------------------------------------------//\r\n\r\n    render() {\r\n        \r\n        //GENERAMOS LA LISTA DE GENEROS\r\n        let genresForm = this.state.moviesORtvshowsSearch==\"movies\" ? \r\n            this.state.moviesGenresInfo.map((genre,idx) =>     //si el state nos marca que estamos mostrando pelis, generamos la lista de generos de pelis dinamicamente\r\n                <FormInputElement type=\"checkbox\" id={[\"inputMovie\"+idx]} name={genre.name} value={genre.id} label={genre.name} checkedBool=\"false\" />\r\n            )\r\n            :\r\n            this.state.tvShowsGenresInfo.map((genre,idx) =>\r\n                <FormInputElement type=\"checkbox\" id={[\"inputTVshow\"+idx]} name={genre.name} value={genre.id} label={genre.name} checkedBool=\"false\" />\r\n            ) \r\n        ;\r\n        \r\n        //----------------------//\r\n        \r\n        //GENERAMOS EL CONTENIDO DE PELIS O SERIES\r\n        let content = this.state.moviesORtvshowsSearch==\"movies\" ?   //generamos todo el contenido de peliculas o series\r\n\r\n            this.state.moviesContent.map((movie,idx) =>\r\n                <Link to={'/movieDetails/'+movie.id}>\r\n                    <Movie data={movie} />\r\n                </Link>\r\n                ///\r\n            )\r\n            :\r\n            this.state.tvShowsContent.map((show,idx) =>\r\n                <Link to={'/tvShowDetails/'+show.id}>\r\n                    <TVShow data={show} />\r\n                </Link>\r\n                ///\r\n            );\r\n                                          \r\n        //----------------------//\r\n               \r\n\r\n        \r\n        let message = this.state.searchType==\"withText\" ? \r\n        <h3>You have searched for <label className=\"highlight\">\"{this.state.filter}\"</label></h3> \r\n        : \r\n        this.state.pages - this.state.actualPage == 0 ? \r\n        <h3>You have discovered all the <label className=\"highlight\">{this.state.moviesORtvshowsSearch}</label>, you are a real cinema addict!</h3> \r\n        : \r\n        <h3>There are still <label className=\"highlight\">{this.state.pages - this.state.actualPage}</label> more pages and <label className=\"highlight\">{this.state.count - (20*this.state.actualPage)}</label> {this.state.moviesORtvshowsSearch} !</h3>;\r\n        \r\n        let firstPageDisabled = this.state.actualPage==1 ? <input type=\"button\" value=\"<\" onClick={this.pageBack} disabled /> : <input type=\"button\" value=\"<\" onClick={this.pageBack} />;\r\n        let lastPageDisabled = this.state.actualPage==this.state.pages ? <input type=\"button\" value=\">\" onClick={this.pageForward} disabled /> : <input type=\"button\" value=\">\" onClick={this.pageForward} />\r\n                                          \r\n        //----------------------//                                 \r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"formulario\">\r\n                    <FormInfoElement data=\"Search\" />\r\n                    <input type=\"text\" id=\"inputSearch\" onChange={this.filterChange} placeholder={[\"Search \"+this.state.moviesORtvshowsSearch+\"!\"]} />\r\n                    <form id=\"formulario\" onChange={this.formChange}>\r\n                        <FormInfoElement data=\"Discover\" />\r\n                        <FormInputElement type=\"radio\" id=\"discoverMovies\" name=\"type\" value=\"movies\" label=\"Movies\" checkedBool=\"true\" />\r\n                        <FormInputElement type=\"radio\" id=\"discoverTVshows\" name=\"type\" value=\"TVshow\" label=\"TV Shows\" checkedBool=\"false\" />\r\n                        <FormInfoElement data=\"Genres\" />\r\n                        {genresForm}\r\n                    </form>\r\n                </div>\r\n            <div id=\"background\">\r\n                <div className=\"contenido\">\r\n                    <div>\r\n                        <ResultsCount count={this.state.count}/>\r\n                    </div>\r\n                    <div>\r\n                        {content}\r\n                    </div>\r\n                    <div className=\"pagesContent\">\r\n                        {message}\r\n                        <form onClick={this.pageChange}>\r\n                            {firstPageDisabled}\r\n                            {this.state.actualPage}\r\n                            {lastPageDisabled}\r\n                        </form>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n        );\r\n    }\r\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}